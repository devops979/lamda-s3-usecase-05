name: Lamda trigger through SNS and s3

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the Terraform action'
        required: true
        default: 'apply'  # Default action is apply
        type: choice
        options:
          - apply
          - destroy
  pull_request:
    branches:
      - main          
permissions:
  contents: write
  id-token: write
  pull-requests: write
 
jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: tflint --init && tflint -f compact
        working-directory: ./

      - name: Install Checkov
        run: |
          pip3 install --upgrade pip
          pip3 install checkov

      - name: Run Checkov
        run: 
          checkov -d . --framework terraform --soft-fail 
        working-directory: ./

  terraform_apply_destroy:
    runs-on: ubuntu-latest
    needs: lint-and-security
    env:
      TF_VAR_pem_file_path: ${{ github.workspace }}/deploy-key.pem
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::211125325699:role/Demo_Access
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ">= 1.12.0"

      - name: Initialize Terraform
        run: terraform init
 
      - name: Create SSH Key File
        run: |
          echo '${{ secrets.SSH_PRIVATE_KEY_B64 }}' | base64 -d > ${{ env.TF_VAR_pem_file_path }}
          chmod 400 ${{ env.TF_VAR_pem_file_path }}  # Restrict permissions
      
      - name: Use SSH key
        run: |
          export TF_VAR_pem_file_path=$(pwd)/deploy-key.pem
      
      - name: Validate Terraform
        run: terraform validate
        working-directory: ./
      
      - name: Generate Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./

      - name: Generate Markdown Documentation
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          working-dir: ./
          output-file: README.md
          output-method: inject
          git-push: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

      - name: Configure Git
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Post Plan as Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('tfplan', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Terraform Plan Preview\n\`\`\`\n${plan}\n\`\`\``
            });
      
      - name: Perform Action
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -auto-approve
          else
            echo "Invalid action selected."
            exit 1
          fi